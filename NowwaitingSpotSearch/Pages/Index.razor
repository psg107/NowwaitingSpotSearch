@page "/"
@using Blazored.LocalStorage
@using Microsoft.EntityFrameworkCore
@using NowwaitingSpotSearch.Contexts
@using NowwaitingSpotSearch.Entities

<PageTitle>NowWaitingSpotSearch</PageTitle>

<div class="container">
    <div class="row mt-2">
        <form @onsubmit=Search>
            <input @bind=name type="text" class="form-control" placeholder="가게명" disabled="@loading">
            <input @bind=address type="text" class="form-control mt-1" placeholder="주소" disabled="@loading">
            <button type="submit" class="btn btn-primary w-100 mt-1 @(loading ? "disabled" : "")">검색</button>
        </form>
    </div>

    <div class="row mt-2">
        <div class="col">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Name</th>
                        <th scope="col">Phone</th>
                        <th scope="col">Address</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var spot in this.spots)
                    {
                        <tr @onclick="() => OpenSpotInfo(spot.Id)">
                            <th scope="row">@spot.Id</th>
                            <td>@spot.Name</td>
                            <td>@spot.Phone</td>
                            <td>@spot.Address</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (this.loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    @exceptionMessage
</div>


@code
{
    public const string NAME_KEY = "NAME";
    public const string ADDRESS_KEY = "ADDRESS";

    [Inject]
    public WaitingDBContext Context { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public ILocalStorageService LocalStorageService { get; set; }

    private string name;
    private string address;
    private bool loading;
    private string exceptionMessage;
    private List<SpotEntity> spots = new List<SpotEntity>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.name = await LocalStorageService.GetItemAsStringAsync(NAME_KEY) ?? string.Empty;
            this.address = await LocalStorageService.GetItemAsStringAsync(ADDRESS_KEY) ?? string.Empty;
            StateHasChanged();
        }
    }

    //검색
    public async Task Search()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(this.name) && string.IsNullOrWhiteSpace(this.address))
            {
                await JSRuntime.InvokeAsync<object>("alert", "검색어를 입력하세요");
                return;
            }

            this.loading = true;

            //초기화
            this.exceptionMessage = string.Empty;
            this.spots.Clear();

            //trim
            this.name = this.name?.Trim();
            this.address = this.address?.Trim();

            //검색
            this.spots = await Context.Spots
                .AsQueryable()
                .Where(x => string.IsNullOrWhiteSpace(this.name) || x.Name.Contains(this.name))
                .Where(x => string.IsNullOrWhiteSpace(this.address) || x.Address.Contains(this.address))
                .OrderByDescending(x => x.Id)
                .ToListAsync();

            //저장
            await LocalStorageService.SetItemAsStringAsync(NAME_KEY, this.name);
            await LocalStorageService.SetItemAsStringAsync(ADDRESS_KEY, this.address);
        }
        catch (Exception ex)
        {
            this.exceptionMessage = ex.Message;
        }
        finally
        {
            this.loading = false;
        }
    }

    //스팟 정보 열기
    public async Task OpenSpotInfo(long spotId)
    {
        var url = $"https://store.nowwaiting.co/spots/{spotId}";
        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
    }
}